#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ timetable.json —Ñ–∞–π–ª–∞
–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ë—Ä–µ—Å—Ç–∞
"""

import json
import os
from datetime import datetime
from pathlib import Path

def create_timetable():
    """–°–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω—ã–π timetable.json —Ñ–∞–π–ª"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    timetable = {
        "metadata": {
            "version": "1.0.0",
            "generated_at": datetime.now().isoformat(),
            "source": "brestgortrans.by",
            "transport_types": ["buses", "trolleybuses", "minibuses"],
            "total_routes": 0,
            "total_stops": 0
        },
        "data": {}
    }
    
    total_routes = 0
    total_stops = 0
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    for transport_type in ["buses", "trolleybuses", "minibuses"]:
        json_file = Path(f"data/{transport_type}.json")
        if json_file.exists():
            try:
                with open(json_file, "r", encoding="utf-8") as f:
                    transport_data = json.load(f)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                timetable["data"][transport_type] = transport_data
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                routes = transport_data.get("routes", [])
                total_routes += len(routes)
                
                for route in routes:
                    stops = route.get("stops", [])
                    total_stops += len(stops)
                    
                print(f"‚úì {transport_type}: {len(routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
                
            except Exception as e:
                print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {transport_type}: {e}")
                timetable["data"][transport_type] = {"error": str(e)}
        else:
            print(f"‚ö† –§–∞–π–ª {transport_type}.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            timetable["data"][transport_type] = {"error": "File not found"}
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    timetable["metadata"]["total_routes"] = total_routes
    timetable["metadata"]["total_stops"] = total_stops
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–¥–∏–Ω—ã–π —Ñ–∞–π–ª
    output_file = Path("data/timetable.json")
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(timetable, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ Timetable.json —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìä –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_routes}")
    print(f"üöè –í—Å–µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫: {total_stops}")
    print(f"üìÅ –§–∞–π–ª: {output_file.absolute()}")
    
    return timetable

def create_meta_json():
    """–°–æ–∑–¥–∞–µ—Ç meta.json —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    
    meta = {
        "last_updated": datetime.now().isoformat(),
        "version": "1.0.0",
        "source": "brestgortrans.by",
        "files": {
            "timetable.json": {
                "description": "–ï–¥–∏–Ω—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                "format": "JSON",
                "encoding": "UTF-8"
            },
            "buses.json": {
                "description": "–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤",
                "format": "JSON",
                "encoding": "UTF-8"
            },
            "trolleybuses.json": {
                "description": "–î–∞–Ω–Ω—ã–µ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤", 
                "format": "JSON",
                "encoding": "UTF-8"
            },
            "minibuses.json": {
                "description": "–î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö —Ç–∞–∫—Å–∏",
                "format": "JSON",
                "encoding": "UTF-8"
            }
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º meta.json
    meta_file = Path("data/meta.json")
    with open(meta_file, "w", encoding="utf-8") as f:
        json.dump(meta, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ Meta.json —Å–æ–∑–¥–∞–Ω: {meta_file.absolute()}")
    return meta

if __name__ == "__main__":
    print("üöå –°–æ–∑–¥–∞–Ω–∏–µ timetable.json –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ë—Ä–µ—Å—Ç–∞")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    Path("data").mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
    timetable = create_timetable()
    meta = create_meta_json()
    
    print("\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:")
    print("   https://cdn.jsdelivr.net/gh/USERNAME/transport_in_Brest-data@main/data/timetable.json")

